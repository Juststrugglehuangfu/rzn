<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- namespace命名空间，作用就是对sql进行分类化管理，理解sql隔离 注意：使用mapper代理方法开发，namespace有特殊重要的作用，namespace等于mapper接口地址 -->
<mapper namespace="com.frame.kernel.org.dao.OrgDao">

	<!-- 在 映射文件中配置很多sql语句 -->
	<!-- 需求：通过id查询用户表的记录 -->
	<!-- 通过 select执行数据库查询 id：标识 映射文件中的 sql 将sql语句封装到mappedStatement对象中，所以将id称为statement的id
		parameterType：指定输入 参数的类型，这里指定int型 #{}表示一个占位符号 #{id}：其中的id表示接收输入 的参数，参数名称就是id，如果输入
		参数是简单类型，#{}中的参数名可以任意，可以value或其它名称 resultType：指定sql输出结果 的所映射的java对象类型，select指定resultType表示将单条记录映射成的java对象。 -->
	<!-- 用户信息综合查询总数 parameterType：指定输入类型和findUserList一样 resultType：输出结果类型 -->

	<select id="findByParentOrgId" resultType="org">
		SELECT *
		FROM
		frame_org
		WHERE porg_id = #{pOrgId}
		<if test="enableFlag != null and enableFlag != ''">
			AND enable_flag = #{enableFlag}
		</if>
		ORDER BY
		display_order ASC;
	</select>

	<select id="countByParentOrgId" resultType="Integer">
		SELECT count(*)
		FROM
			frame_org
		WHERE porg_id = #{pOrgId}
			  AND enable_flag = #{enableFlag};
	</select>

	<select id="countByOrgId" resultType="Integer">
		SELECT count(*)
		FROM
		frame_org
		WHERE org_id = #{orgId}
		AND enable_flag = #{enableFlag};
	</select>

	<select id="countByUserOrg" resultType="Integer">
		SELECT count(*)
		FROM
			frame_user
		WHERE org_id = #{orgId};
	</select>

	<select id="findByOrgId" resultType="org">
		SELECT *
		FROM
		frame_org
		WHERE
		org_id = #{orgId}
		<if test="enableFlag != null and enableFlag != ''">
			AND enable_flag = #{enableFlag}
		</if>
	</select>

	<select id="getPageList" resultType="org">
		SELECT
		o.org_id,
		o.org_code,
		o.org_name,
		o.org_desc,
		o.display_order,
		o.porg_id,
		o.company_flag,
		CASE
		WHEN o.company_flag = 'Y' THEN
		'是'
		WHEN
		o.company_flag = 'N' THEN
		'否'
		END AS company_flag_display,
		o.enable_flag,
		CASE
		WHEN o.enable_flag = 'Y' THEN
		'是'
		WHEN o.enable_flag =
		'N' THEN
		'否'
		END AS enable_flag_display,
		o.created_date,
		u.user_name as
		created_by_name
		FROM
		frame_org o left JOIN frame_user u
		on o.created_by =
		u.user_id
		WHERE
		1 = 1
		<if test="porg_id != null and porg_id != ''">
			and o.porg_id = #{porg_id}
		</if>
		<if test="org_name != null and org_name != ''">
			and o.org_name LIKE '%${org_name}%'
		</if>
		ORDER BY ${sortName} ${sortOrder}
		LIMIT #{offset}, #{limit};
	</select>

	<select id="getPageCount" resultType="int">
		SELECT
		count(*)
		FROM
		frame_org o
		LEFT JOIN frame_user u ON o.created_by =
		u.user_id
		WHERE
		1 = 1
		<if test="porg_id != null and porg_id != ''">
			and o.porg_id = #{porg_id}
		</if>
		<if test="org_name != null and org_name != ''">
			and o.org_name LIKE '%${org_name}%'
		</if>
	</select>

	<insert id="saveOrg" parameterType="org">
		<!-- 将插入数据的主键返回，返回到user对象中 SELECT LAST_INSERT_ID()：得到刚insert进去记录的主键值，只适用与自增主键
			keyProperty：将查询到主键值设置到parameterType指定的对象的哪个属性 order：SELECT LAST_INSERT_ID()执行顺序，相对于insert语句来说它的执行顺序
			resultType：指定SELECT LAST_INSERT_ID()的结果类型 -->
		<!-- <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Integer">
			SELECT LAST_INSERT_ID() </selectKey> insert into user(username,birthday,sex,address)
			value(#{username},#{birthday},#{sex},#{address}) -->
		<!-- 使用mysql的uuid（）生成主键 执行过程： 首先通过uuid()得到主键，将主键设置到user对象的id属性中 其次在insert执行时，从user对象中取出id属性值 -->
		<selectKey keyProperty="org_id" order="BEFORE" resultType="java.lang.Integer">
			SELECT nextval_sequence('frame_org');
		</selectKey>
		insert into
		frame_org(org_id,org_code,org_name,org_desc,display_order,porg_id,company_flag,enable_flag,created_date,created_by,last_updated_date,last_updated_by)
		value(#{org_id},#{org_code},#{org_name},#{org_desc},#{display_order},#{porg_id},#{company_flag},#{enable_flag},#{created_date},#{created_by},#{last_updated_date},#{last_updated_by})
	</insert>

	<update id="updateOrg" parameterType="org">
		UPDATE frame_org
		SET
			org_code          = #{org_code},
			org_name          = #{org_name},
			org_desc          = #{org_desc},
			display_order     = #{display_order},
			last_updated_date = #{last_updated_date},
			last_updated_by   = #{last_updated_by}
		WHERE org_id = #{org_id}
	</update>

	<update id="enableOrg">
		update frame_org set enable_flag= 'Y'
		<foreach collection="ids" item="org_id" open="where org_id IN("
				 close=")" separator=",">
			#{org_id}
		</foreach>
	</update>

	<update id="disableOrg">
		update frame_org set enable_flag= 'N'
		<foreach collection="ids" item="org_id" open="where org_id IN("
				 close=")" separator=",">
			#{org_id}
		</foreach>
	</update>


	<select id="validateExistance" resultType="int">
		SELECT count(1) FROM
		frame_org a
		where 1=1
		<if test="org_code != null and org_code != ''">
			and a.org_code = #{org_code}
		</if>
		<if test="org_name != null and org_name != ''">
			and a.org_name = #{org_name}
		</if>
		<if test="porg_id !=null and porg_id != ''">
			and a.porg_id = #{porg_id}
		</if>
	</select>
</mapper>
