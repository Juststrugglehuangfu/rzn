<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- namespace命名空间，作用就是对sql进行分类化管理，理解sql隔离 注意：使用mapper代理方法开发，namespace有特殊重要的作用，namespace等于mapper接口地址 -->
<mapper namespace="com.frame.business.contracts.dao.ContractsDao">

    <!-- 在 映射文件中配置很多sql语句 -->
    <!-- 需求：通过id查询用户表的记录 -->
    <!-- 通过 select执行数据库查询 id：标识 映射文件中的 sql 将sql语句封装到mappedStatement对象中，所以将id称为statement的id
        parameterType：指定输入 参数的类型，这里指定int型 #{}表示一个占位符号 #{id}：其中的id表示接收输入 的参数，参数名称就是id，如果输入
        参数是简单类型，#{}中的参数名可以任意，可以value或其它名称 resultType：指定sql输出结果 的所映射的java对象类型，select指定resultType表示将单条记录映射成的java对象。 -->
    <select id="getList" resultType="contracts">
        select fc.*,fus.emp_name,fut.emp_name from
        frame_contracts fc
        LEFT JOIN
        (select * from frame_user where role = 'STU' ) fus
        on fc.contract_stu = fus.user_id
        LEFT JOIN
        (select * from frame_user where role = 'TEA' ) fut
        on fc.contract_tea = fut.user_id
        WHERE
        1 = 1
        <if test="contract_no!=null and contract_no!='' ">
            and fc.contract_no = #{contract_no}
        </if>
        <if test="contract_tea!=null and contract_tea!='' ">
            and fc.contract_tea = #{contract_tea}
        </if>
        <if test="contract_stu!=null and contract_stu!='' ">
            and fc.contract_stu = #{contract_stu}
        </if>
        ORDER BY ${sortName} ${sortOrder}
        LIMIT #{offset},#{limit};
    </select>
    <!-- 用户信息综合查询总数 parameterType：指定输入类型和findUserList一样 resultType：输出结果类型 -->
    <select id="findCount" resultType="int">
        SELECT count(*) from
        frame_contracts fc
        WHERE
        1 = 1
        <if test="contract_no!=null and contract_no!='' ">
            and fc.contract_no = #{contract_no}
        </if>
        <if test="contract_tea!=null and contract_tea!='' ">
            and fc.contract_tea = #{contract_tea}
        </if>
        <if test="contract_stu!=null and contract_stu!='' ">
            and fc.contract_stu = #{contract_stu}
        </if>
    </select>
    <!-- 添加用户 parameterType：指定输入 参数类型是pojo（包括 用户信息） #{}中指定pojo的属性名，接收到pojo对象的属性值，mybatis通过OGNL获取对象的属性值 -->
    <insert id="saveContracts" parameterType="com.frame.business.contracts.model.Contracts" keyProperty="contract_no">
        <!-- 将插入数据的主键返回，返回到user对象中 SELECT LAST_INSERT_ID()：得到刚insert进去记录的主键值，只适用与自增主键
            keyProperty：将查询到主键值设置到parameterType指定的对象的哪个属性 order：SELECT LAST_INSERT_ID()执行顺序，相对于insert语句来说它的执行顺序
            resultType：指定SELECT LAST_INSERT_ID()的结果类型 -->
        <!-- <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Integer">
            SELECT LAST_INSERT_ID() </selectKey> insert into user(username,birthday,sex,address)
            value(#{username},#{birthday},#{sex},#{address}) -->
        <!-- 使用mysql的uuid（）生成主键 执行过程： 首先通过uuid()得到主键，将主键设置到user对象的id属性中 其次在insert执行时，从user对象中取出id属性值 -->
        <selectKey keyProperty="contract_no" order="BEFORE" resultType="java.lang.Integer">
            SELECT nextval_sequence('frame_contracts');
        </selectKey>
        insert into
        frame_contracts(contract_no,contract_stu,contract_tea,contract_amount,contract_hour,contract_rest_hour,attribute1,attribute2,attribute3,attribute4,attribute5,created_date,created_by,last_updated_date,last_updated_by)
        value(#{contract_no},#{contract_stu},#{contract_tea},#{contract_amount},#{contract_hour},#{contract_rest_hour},#{attribute1},#{attribute2},#{attribute3},#{attribute4},#{attribute5},now(),#{created_by},now(),#{last_updated_by})
    </insert>

    <!-- 根据id更新用户 分析： 需要传入用户的id 需要传入用户的更新信息 parameterType指定user对象，包括 id和更新信息，注意：id必须存在
        #{id}：从输入 user对象中获取id属性值 -->
    <update id="updateContracts" parameterType="com.frame.business.contracts.model.Contracts">
		update frame_contracts set
		contract_stu=#{contract_stu},
		contract_tea=#{contract_tea},
		contract_amount=#{contract_amount},
		contract_hour=#{contract_hour},
		contract_rest_hour=#{contract_rest_hour},
		last_updated_date=now(),
		last_updated_by=#{last_updated_by}
		where contract_no=#{contract_no}
	</update>

    <!-- 根据id更新用户 分析： 需要传入用户的id 需要传入用户的更新信息 parameterType指定user对象，包括 id和更新信息，注意：id必须存在
       #{id}：从输入 user对象中获取id属性值 -->
    <delete id="deleteContracts" parameterType="java.lang.String">
        delete from  frame_contracts
        where contract_no=#{contract_no}
    </delete>

    <select id="findContracts" resultType="contracts">
        select fc.*,fus.emp_name,fut.emp_name from
        frame_contracts fc
        LEFT JOIN
        (select * from frame_user where role = 'STU' ) fus
        on fc.contract_stu = fus.user_id
        LEFT JOIN
        (select * from frame_user where role = 'TEA' ) fut
        on fc.contract_tea = fut.user_id
        WHERE
        1 = 1
        <if test="contract_no!=null and contract_no!='' ">
            and fc.contract_no = #{contract_no}
        </if>
        <if test="contract_tea!=null and contract_tea!='' ">
            and fc.contract_tea = #{contract_tea}
        </if>
        <if test="contract_stu!=null and contract_stu!='' ">
            and fc.contract_stu = #{contract_stu}
        </if>

    </select>
</mapper>


