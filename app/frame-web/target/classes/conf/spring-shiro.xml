<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:util="http://www.springframework.org/schema/util"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans-4.3.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context-4.3.xsd http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd">

    <!-- 使用spring组件扫描@service  -->
    <context:component-scan base-package="com.frame.*.service"/>

    <!-- 缓存管理器 -->
    <bean id="cacheManager" class="com.frame.kernel.shiro.SpringCacheManagerWrapper">
        <property name="cacheManager" ref="springCacheManager" />
    </bean>

    <!-- 凭证匹配器 -->
    <bean id="credentialsMatcher" class="com.frame.kernel.shiro.RetryLimitHashedCredentialsMatcher">
        <constructor-arg ref="cacheManager" />
        <!-- 		<property name="hashAlgorithmName" value="md5"/>
                <property name="hashIterations" value="2" /> -->
        <property name="retryTime" value="-1"></property><!-- 密码重试最大次数，-1为无限制 -->
        <property name="storedCredentialsHexEncoded" value="true" />
    </bean>
    <!-- Realm实现 -->
    <!-- 继承自AuthorizingRealm的自定义Realm,即指定Shiro验证用户登录的类为自定义的LoginRealm.java -->
    <bean id="loginRealm" class="com.frame.kernel.shiro.LoginRealm">
        <property name="credentialsMatcher" ref="credentialsMatcher" />
        <property name="cacheManager" ref="cacheManager"/>
        <property name="cachingEnabled" value="true" />
        <!--<property name="authenticationCachingEnabled" value="true"/> -->
        <!--<property name="authenticationCacheName" value="authenticationCache"/> -->
        <!--<property name="authorizationCachingEnabled" value="true"/> -->
        <!--<property name="authorizationCacheName" value="authorizationCache"/> -->
    </bean>

    <bean id="ssoRealm" class="com.frame.kernel.shiro.SsoRealm">
        <!-- <property name="credentialsMatcher" ref="credentialsMatcher" /> -->
        <property name="cacheManager" ref="cacheManager"/>
        <property name="cachingEnabled" value="true" />
    </bean>
    <!-- 会话ID生成器 -->
    <bean id="sessionIdGenerator" class="org.apache.shiro.session.mgt.eis.JavaUuidSessionIdGenerator" />

    <!-- 会话Cookie模板 -->
    <bean id="sessionIdCookie" class="org.apache.shiro.web.servlet.SimpleCookie">
        <!-- <constructor-arg value="sid" /> -->
        <constructor-arg   value="SHAREJSESSIONID" />
        <property name="httpOnly" value="true" />
        <property name="path" value="/" />
        <!-- <property name="maxAge" value="180000" /> -->
    </bean>

    <bean id="rememberMeCookie" class="org.apache.shiro.web.servlet.SimpleCookie">
        <constructor-arg value="rememberMe" />
        <property name="httpOnly" value="true" />
        <property name="maxAge" value="2592000" /><!-- 30天 -->
    </bean>

    <!-- rememberMe管理器 -->
    <bean id="rememberMeManager" class="org.apache.shiro.web.mgt.CookieRememberMeManager">
        <!-- rememberMe cookie加密的密钥 建议每个项目都不一样 默认AES算法 密钥长度（128 256 512 位） -->
        <property name="cipherKey" value="#{T(org.apache.shiro.codec.Base64).decode('4AvVhmFLUs0KTA3Kprsdag==')}" />
        <property name="cookie" ref="rememberMeCookie" />
    </bean>

    <!-- 会话DAO -->
    <bean id="redisSessionDAO" class="com.frame.kernel.shiro.redis.RedisSessionDAO">
        <property name="cacheManager" ref="cacheManager" />
    </bean>

    <!-- 会话验证调度器 -->
    <bean id="sessionValidationScheduler" class="com.frame.kernel.shiro.scheduler.QuartzSessionValidationScheduler">
        <property name="sessionValidationInterval" value="1800000" /><!-- 全局过期时间30分钟 -->
        <property name="sessionManager" ref="sessionManager" />
    </bean>

    <!-- 会话管理器 -->
    <bean id="sessionManager" class="com.frame.kernel.shiro.session.ShiroSessionManager">
        <property name="globalSessionTimeout" value="18000000" />
        <property name="deleteInvalidSessions" value="true" />
        <property name="sessionDAO" ref="redisSessionDAO" />
        <property name="sessionValidationSchedulerEnabled" value="true" />
        <property name="sessionValidationScheduler" ref="sessionValidationScheduler" />
        <property name="cacheManager" ref="cacheManager" />
        <property name="sessionIdCookieEnabled" value="true" />
        <property name="sessionIdCookie" ref="sessionIdCookie" />
    </bean>
    <!-- 安全管理器  ref对象-->
    <bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
        <property name="authenticator" ref="authenticator" />
        <property name="realms">
            <list>
                <ref bean="loginRealm"/>
                <ref bean="ssoRealm"/>
            </list>
        </property>
        <property name="sessionManager" ref="sessionManager" />
        <!-- <property name="cacheManager" ref="cacheManager" /> -->
        <property name="rememberMeManager" ref="rememberMeManager" />
    </bean>

    <!-- session会话存储的实现类 -->

    <!-- 第一个认证成功的reaml作为返回值 -->
    <bean id="authenticator" class="com.frame.kernel.shiro.ModularRealmAuthenticator">
        <property name="authenticationStrategy">
            <bean class="org.apache.shiro.authc.pam.FirstSuccessfulStrategy" />
        </property>
    </bean>


    <!-- 相当于调用SecurityUtils.setSecurityManager(securityManager) -->
    <bean class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">
        <property name="staticMethod" value="org.apache.shiro.SecurityUtils.setSecurityManager" />
        <property name="arguments" ref="securityManager" />
    </bean>

    <!-- 基于Form表单的身份验证过滤器 -->
    <bean id="formAuthenticationFilter" class="com.frame.kernel.shiro.ShiroFormAuthenticationFilter">
        <property name="usernameParam" value="username" />
        <property name="passwordParam" value="password" />
        <!-- <property name="rememberMeParam" value="rememberMe" /> -->
        <property name="loginUrl" value="/login" />
    </bean>

    <!-- 并发登录人数控制 -->
    <bean id="kickoutSessionControlFilter" class="com.frame.kernel.shiro.filter.KickoutSessionControlFilter">
        <property name="cacheManager" ref="cacheManager"/>
        <property name="sessionManager" ref="sessionManager"/>

        <property name="kickoutAfter" value="false"/>
        <property name="maxSession" value="1"/>
        <property name="kickoutUrl" value="/login?kickout=1"/>
    </bean>

    <!-- shiro filter -->
    <!-- Shiro主过滤器本身功能十分强大,其强大之处就在于它支持任何基于URL路径表达式的、自定义的过滤器的执行 -->
    <!-- Web应用中,Shiro可控制的Web请求必须经过Shiro主过滤器的拦截,Shiro对基于Spring的Web应用提供了完美的支持 -->

    <bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
        <!-- 安全管理器必须的 -->
        <property name="securityManager" ref="securityManager"/>
        <!-- 身份认证失败   认证提交的地址 -->
        <property name="loginUrl" value="/login"/>
        <!-- 登录成功-->
        <property name="successUrl" value="/index"/>
        <!-- 权限认证失败    没有权限认证提交的地址 -->
        <!-- 用户访问未对其授权的资源时,所显示的连接 -->
        <!-- 若想更明显的测试此属性可以修改它的值,如unauthor.jsp,然后用[其他用户]登录后访问/admin/listUser.jsp就看见浏览器会显示unauthor.jsp -->
        <property name="unauthorizedUrl" value="/login.jsp"/>
        <!-- Shiro连接约束配置,即过滤链的定义 -->
        <!-- 此处可配合我的这篇文章来理解各个过滤连的作用http://blog.csdn.net/jadyer/article/details/12172839 -->
        <!-- 下面value值的第一个'/'代表的路径是相对于HttpServletRequest.getContextPath()的值来的 -->
        <!-- anon：它对应的过滤器里面是空的,什么都没做,这里.do和.jsp后面的*表示参数,比方说login.jsp?main这种 -->
        <!-- authc：该过滤器下的页面必须验证后才能访问,它是Shiro内置的一个拦截器org.apache.shiro.web.filter.authc.FormAuthenticationFilter -->

        <property name="filters">
            <util:map>
                <entry key="authc" value-ref="formAuthenticationFilter" />
                <entry key="kickout" value-ref="kickoutSessionControlFilter"/>
            </util:map>
        </property>
        <!-- Shiro连接约束配置,即过滤链的定义 -->
        <property name="filterChainDefinitions">
            <value>
                <!-- 对静态资源设置匿名访问 -->
                /resources/**=anon
                / = user
                /index = user
                /login = anon
                /loginUser = anon
                /sso =anon
                /sso/Logout = logout
                /logout = logout
                <!-- /** = authc 所有url都必须认证通过才可以访问 -->
                /** =kickout,user
            </value>
        </property>
    </bean>

    <!-- Shiro生命周期处理器 -->
    <!-- 保证实现了Shiro内部lifecycle函数的bean执行 -->
    <bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor" />

    <!-- 解决shiro配置的没有权限访问时，unauthorizedUrl不跳转到指定路径的问题 -->
    <bean class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver">
        <property name="exceptionMappings">
            <props>
                <prop key="org.apache.shiro.authz.UnauthorizedException">/refuse</prop>
            </props>
        </property>
    </bean>




</beans>