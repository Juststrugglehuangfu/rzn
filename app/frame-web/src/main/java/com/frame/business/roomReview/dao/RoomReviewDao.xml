<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- namespace命名空间，作用就是对sql进行分类化管理，理解sql隔离 注意：使用mapper代理方法开发，namespace有特殊重要的作用，namespace等于mapper接口地址 -->
<mapper namespace="com.frame.business.roomReview.dao.RoomReviewDao">

    <!-- 在 映射文件中配置很多sql语句 -->
    <!-- 需求：通过id查询用户表的记录 -->
    <!-- 通过 select执行数据库查询 id：标识 映射文件中的 sql 将sql语句封装到mappedStatement对象中，所以将id称为statement的id
        parameterType：指定输入 参数的类型，这里指定int型 #{}表示一个占位符号 #{id}：其中的id表示接收输入 的参数，参数名称就是id，如果输入
        参数是简单类型，#{}中的参数名可以任意，可以value或其它名称 resultType：指定sql输出结果 的所映射的java对象类型，select指定resultType表示将单条记录映射成的java对象。 -->
    <select id="getList" resultType="roomReview">
        select fc.*,fus.emp_name emp_name_stu ,fut.emp_name emp_name_tea from
        frame_room_review fc
        LEFT JOIN
        (select * from frame_user where role = 'STU' ) fus
        on fc.review_stu = fus.user_id
        LEFT JOIN
        (select * from frame_user where role = 'TEA' ) fut
        on fc.review_tea = fut.user_id
        WHERE
        1 = 1
        <if test="review_white_id!=null and review_white_id!='' ">
            and fc.review_white_id = #{review_white_id}
        </if>
        <if test="review_stu!=null and review_stu!='' ">
            and fc.review_stu = #{review_stu}
        </if>
        <if test="review_tea_name!=null and review_tea_name!='' ">
            and fut.emp_name like  '%${review_tea_name}%'
        </if>
        <if test="review_tea!=null and review_tea!='' ">
            and fc.review_tea = #{review_tea}
        </if>
        <if test="review_stu_name!=null and review_stu_name!='' ">
            and fus.emp_name like  '%${review_stu_name}%'
        </if>
        ORDER BY ${sortName} ${sortOrder}
        LIMIT #{offset},#{limit};
    </select>
    <!-- 用户信息综合查询总数 parameterType：指定输入类型和findUserList一样 resultType：输出结果类型 -->
    <select id="findCount" resultType="int">
        SELECT count(*) from
        frame_room_review fc
        LEFT JOIN
        (select * from frame_user where role = 'STU' ) fus
        on fc.review_stu = fus.user_id
        LEFT JOIN
        (select * from frame_user where role = 'TEA' ) fut
        on fc.review_tea = fut.user_id
        WHERE
        1 = 1
        <if test="review_white_id!=null and review_white_id!='' ">
            and fc.review_white_id = #{review_white_id}
        </if>
        <if test="review_stu!=null and review_stu!='' ">
            and fc.review_stu = #{review_stu}
        </if>
        <if test="review_tea_name!=null and review_tea_name!='' ">
            and fut.emp_name like  '%${review_tea_name}%'
        </if>
        <if test="review_tea!=null and review_tea!='' ">
            and fc.review_tea = #{review_tea}
        </if>
        <if test="review_stu_name!=null and review_stu_name!='' ">
            and fus.emp_name like  '%${review_stu_name}%'
        </if>
    </select>
    <!-- 添加用户 parameterType：指定输入 参数类型是pojo（包括 用户信息） #{}中指定pojo的属性名，接收到pojo对象的属性值，mybatis通过OGNL获取对象的属性值 -->
    <insert id="saveRoomReview" parameterType="com.frame.business.roomReview.model.RoomReview" keyProperty="review_id">
        <!-- 将插入数据的主键返回，返回到user对象中 SELECT LAST_INSERT_ID()：得到刚insert进去记录的主键值，只适用与自增主键
            keyProperty：将查询到主键值设置到parameterType指定的对象的哪个属性 order：SELECT LAST_INSERT_ID()执行顺序，相对于insert语句来说它的执行顺序
            resultType：指定SELECT LAST_INSERT_ID()的结果类型 -->
        <!-- <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Integer">
            SELECT LAST_INSERT_ID() </selectKey> insert into user(username,birthday,sex,address)
            value(#{username},#{birthday},#{sex},#{address}) -->
        <!-- 使用mysql的uuid（）生成主键 执行过程： 首先通过uuid()得到主键，将主键设置到user对象的id属性中 其次在insert执行时，从user对象中取出id属性值 -->
        <selectKey keyProperty="review_id" order="BEFORE" resultType="java.lang.Integer">
            SELECT nextval_sequence('frame_room_review');
        </selectKey>
        insert into
        frame_room_review(review_id,review_white_id,review_stu,review_tea,review_content,attribute1,attribute2,attribute3,attribute4,attribute5,created_date,created_by,last_updated_date,last_updated_by)
        value(#{review_id},#{review_white_id},#{review_stu},#{review_tea},#{review_content},#{attribute1},#{attribute2},#{attribute3},#{attribute4},#{attribute5},now(),#{created_by},now(),#{last_updated_by})
    </insert>

    <!-- 根据id更新用户 分析： 需要传入用户的id 需要传入用户的更新信息 parameterType指定user对象，包括 id和更新信息，注意：id必须存在
        #{id}：从输入 user对象中获取id属性值 -->
    <update id="updateRoomReview" parameterType="com.frame.business.roomReview.model.RoomReview">
        update frame_room_review set
        review_white_id=#{review_white_id},
        review_stu=#{review_stu},
        review_tea=#{review_tea},
        review_content=#{review_content},
        attribute1=#{attribute1},
        attribute2=#{attribute2},
        attribute3=#{attribute3},
        attribute4=#{attribute4},
        attribute5=#{attribute5},
        last_updated_date=now(),
        last_updated_by=#{last_updated_by}
        where review_id=#{review_id}
    </update>

    <!-- 根据id更新用户 分析： 需要传入用户的id 需要传入用户的更新信息 parameterType指定user对象，包括 id和更新信息，注意：id必须存在
       #{id}：从输入 user对象中获取id属性值 -->
    <delete id="deleteRoomReview" parameterType="java.lang.String">
        delete from  frame_room_review
        where review_white_id=#{review_white_id}
    </delete>

    <select id="findRoomReview" resultType="roomReview">
        select fc.*,fus.emp_name emp_name_stu ,fut.emp_name emp_name_tea from
        frame_room_review fc
        LEFT JOIN
        (select * from frame_user where role = 'STU' ) fus
        on fc.review_stu = fus.user_id
        LEFT JOIN
        (select * from frame_user where role = 'TEA' ) fut
        on fc.review_tea = fut.user_id
        WHERE
        1 = 1
        <if test="review_white_id!=null and review_white_id!='' ">
            and fc.review_white_id = #{review_white_id}
        </if>
        <if test="review_stu!=null and review_stu!='' ">
            and fc.review_stu = #{review_stu}
        </if>
        <if test="review_tea_name!=null and review_tea_name!='' ">
            and fut.emp_name like  '%${review_tea_name}%'
        </if>
        <if test="review_tea!=null and review_tea!='' ">
            and fc.review_tea = #{review_tea}
        </if>
        <if test="review_stu_name!=null and review_stu_name!='' ">
            and fus.emp_name like  '%${review_stu_name}%'
        </if>
        LIMIT 0,1
    </select>

    <!-- 添加用户 parameterType：指定输入 参数类型是pojo（包括 用户信息） #{}中指定pojo的属性名，接收到pojo对象的属性值，mybatis通过OGNL获取对象的属性值 -->
    <insert id="saveRoomReviewCoursewaresList" parameterType="java.util.List"  >
        <!-- 将插入数据的主键返回，返回到user对象中 SELECT LAST_INSERT_ID()：得到刚insert进去记录的主键值，只适用与自增主键
            keyProperty：将查询到主键值设置到parameterType指定的对象的哪个属性 order：SELECT LAST_INSERT_ID()执行顺序，相对于insert语句来说它的执行顺序
            resultType：指定SELECT LAST_INSERT_ID()的结果类型 -->
        <!-- <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Integer">
            SELECT LAST_INSERT_ID() </selectKey> insert into user(username,birthday,sex,address)
            value(#{username},#{birthday},#{sex},#{address}) -->
        <!-- 使用mysql的uuid（）生成主键 执行过程： 首先通过uuid()得到主键，将主键设置到user对象的id属性中 其次在insert执行时，从user对象中取出id属性值 -->

        <selectKey keyProperty="id" order="BEFORE" resultType="java.lang.Integer">
            SELECT nextval_sequence('frame_room_review_coursewares');
        </selectKey>
        insert into
        frame_room_review_coursewares(id,review_id,coursewares_no,attribute1,attribute2,attribute3,attribute4,attribute5,created_date,created_by,last_updated_date,last_updated_by)
        values
        <foreach collection ="list" item="reddemCode" index= "index" separator =",">
            (
            #{reddemCode.id},
            #{reddemCode.review_id},
            #{reddemCode.coursewares_no},
            #{reddemCode.attribute1},
            #{reddemCode.attribute2},
            #{reddemCode.attribute3},
            #{reddemCode.attribute4},
            #{reddemCode.attribute5},
            now(),
            #{reddemCode.created_by},
            now(),
            #{reddemCode.last_updated_by}
            )
        </foreach >  </insert>

</mapper>


